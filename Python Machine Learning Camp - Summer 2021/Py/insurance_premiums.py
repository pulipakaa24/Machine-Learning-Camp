# -*- coding: utf-8 -*-
"""Insurance Premiums

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wq9hrJKNMZM1qYhiAzOL-M8tX_0gPNE7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split as tts
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder

"""Read Data & Preprocessing"""

dataset = pd.read_csv('insurance.csv')
df = pd.DataFrame(dataset)
x = dataset.iloc[:, :-1]
y = dataset.iloc[:, -1:]
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [5])], remainder='passthrough')
x = ct.fit_transform(x)

le = LabelEncoder()
x[:, 5] = le.fit_transform(x[:, 5])
x[:, 8] = le.fit_transform(x[:, 8])
print(pd.DataFrame(x).head())
xtrain, xtest, ytrain, ytest = tts(x, y, test_size = 0.25, random_state = 0)

"""**The Following Is WITHOUT Standard Scaling**

Linear Regression
"""

reg = LinearRegression()
reg.fit(xtrain, ytrain)
ypred = reg.predict(xtest)
print(r2_score(ytest, ypred))

"""Polynomial Regression"""

poly = PolynomialFeatures(degree=2)
xtp = poly.fit_transform(xtrain)
xtestp = poly.transform(xtest)
reg.fit(xtp, ytrain)
ypred = reg.predict(xtestp)
print(r2_score(ytest, ypred))

"""Decision Tree"""

reg = DecisionTreeRegressor(random_state=5)
reg.fit(xtrain, ytrain)
ypred = reg.predict(xtest)
print(r2_score(ytest, ypred))

"""Random Forest"""

reg = RandomForestRegressor()
reg.fit(xtrain, ytrain)
ypred = reg.predict(xtest)
print(r2_score(ytest, ypred))

"""K Nearest Neighbors (worst)"""

reg = KNeighborsRegressor(n_neighbors=10)
reg.fit(xtrain, ytrain)
ypred = reg.predict(xtest)
print(r2_score(ytest, ypred))

"""**The Following Is WITH Standard Scaling**"""

print(pd.DataFrame(xtrain).head())

sc = StandardScaler()
xtrain[:, [4, 6]] = sc.fit_transform(xtrain[:, [4, 6]])
xtest[:, [4, 6]] = sc.transform(xtest[:, [4, 6]])
ytrain = sc.fit_transform(ytrain)

"""Now Following the Same Order as Before"""

reg = LinearRegression()
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

py = PolynomialFeatures(degree=2)
xtrp = py.fit_transform(xtrain)
xtsp = py.transform(xtest)
reg.fit(xtrp, ytrain)
ypred = sc.inverse_transform(reg.predict(xtsp))
print(r2_score(ytest, ypred))

reg = DecisionTreeRegressor()
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

reg = RandomForestRegressor()
reg.fit(xtrain, ytrain)
pred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

reg = KNeighborsRegressor(n_neighbors=1)
reg.fit(xtrain, ytrain)
pred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))