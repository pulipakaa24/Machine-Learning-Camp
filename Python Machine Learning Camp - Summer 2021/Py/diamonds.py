# -*- coding: utf-8 -*-
"""Diamonds

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qN8FLT161dSZGTGqFyxWjROVzxOZ01KS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split as tts
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder

dataset = pd.read_csv('diamonds.csv')
x = dataset.iloc[:, [0,1,2,3,4,5,7,8,9]]
y = dataset.iloc[:, 6:7]
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1, 2, 3])], remainder='passthrough')
x = ct.fit_transform(x)
print(pd.DataFrame(x).head())
xtrain, xtest, ytrain, ytest = tts(x, y, test_size = 0.25, random_state = 0)
sc = StandardScaler()
xtrain[:, 21:23] = sc.fit_transform(xtrain[:, 21:23])
xtest[:, 21:23] = sc.transform(xtest[:, 21:23])
ytrain = sc.fit_transform(ytrain)

reg = LinearRegression()
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

pl = PolynomialFeatures(degree=2)
xplytrain = pl.fit_transform(xtrain)
xplytest = pl.transform(xtest)
reg.fit(xplytrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xplytest))
print(r2_score(ytest, ypred))

reg = DecisionTreeRegressor()
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

reg = RandomForestRegressor()
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))

reg = KNeighborsRegressor(n_neighbors=5)
reg.fit(xtrain, ytrain)
ypred = sc.inverse_transform(reg.predict(xtest))
print(r2_score(ytest, ypred))