# -*- coding: utf-8 -*-
"""Penguins

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Arofi8efUVCgsjx6MYhUoB8WgtkSlwrn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split as tts
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

dataset = pd.read_csv('penguins.csv')
x = dataset.iloc[:, 2:-2].values
y = dataset.iloc[:, 1:2].values
si = SimpleImputer(missing_values=np.nan)
si.fit(x[:, 1:])
x[:, 1:] = si.transform(x[:, 1:])
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder = 'passthrough')
x = ct.fit_transform(x)
xtrain, xtest, ytrain, ytest = tts(x, y, test_size = 0.25, random_state= 0)
sc = StandardScaler()
xtrain[:, 3:] = sc.fit_transform(xtrain[:, 3:])
xtest[:, 3:] = sc.transform(xtest[:, 3:])
print(ytrain)

c = LogisticRegression()
c.fit(xtrain, ytrain)
ypred = c.predict(xtest)
print(accuracy_score(ytest, ypred))

c = DecisionTreeClassifier()
c.fit(xtrain, ytrain)
ypred = c.predict(xtest)
print(accuracy_score(ytest, ypred))

c = RandomForestClassifier()
c.fit(xtrain, ytrain)
ypred = c.predict(xtest)
print(accuracy_score(ytest, ypred))

c = KNeighborsClassifier(n_neighbors=1)
c.fit(xtrain, ytrain)
ypred = c.predict(xtest)
print(accuracy_score(ytest, ypred))

c = GaussianNB()
c.fit(xtrain, ytrain)
ypred = c.predict(xtest)
print(accuracy_score(ytest, ypred))