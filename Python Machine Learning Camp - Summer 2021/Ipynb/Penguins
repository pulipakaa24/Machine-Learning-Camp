{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Penguins","provenance":[],"authorship_tag":"ABX9TyMxG4JXt7Hs8EkBpIYShnEz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ZYwi1t8iYw3W","executionInfo":{"status":"ok","timestamp":1628880390112,"user_tz":300,"elapsed":124,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split as tts\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","from sklearn.compose import ColumnTransformer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import accuracy_score"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E8wy6NsdbB-Y","executionInfo":{"status":"ok","timestamp":1628880506133,"user_tz":300,"elapsed":156,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"88c93076-de24-4fc3-d328-b8c667bdf620"},"source":["dataset = pd.read_csv('penguins.csv')\n","x = dataset.iloc[:, 2:-2].values\n","y = dataset.iloc[:, 1:2].values\n","si = SimpleImputer(missing_values=np.nan)\n","si.fit(x[:, 1:])\n","x[:, 1:] = si.transform(x[:, 1:])\n","ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder = 'passthrough')\n","x = ct.fit_transform(x)\n","xtrain, xtest, ytrain, ytest = tts(x, y, test_size = 0.25, random_state= 0)\n","sc = StandardScaler()\n","xtrain[:, 3:] = sc.fit_transform(xtrain[:, 3:])\n","xtest[:, 3:] = sc.transform(xtest[:, 3:])\n","print(ytrain)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["[['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Gentoo']\n"," ['Gentoo']\n"," ['Chinstrap']\n"," ['Gentoo']\n"," ['Adelie']\n"," ['Adelie']\n"," ['Gentoo']]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sbhz5gAkgkQl","executionInfo":{"status":"ok","timestamp":1628880514232,"user_tz":300,"elapsed":175,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"6178bed3-adaf-4b14-ed19-1bb5bd230163"},"source":["c = LogisticRegression()\n","c.fit(xtrain, ytrain)\n","ypred = c.predict(xtest)\n","print(accuracy_score(ytest, ypred))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x_27jqdS2JwC","executionInfo":{"status":"ok","timestamp":1628880627555,"user_tz":300,"elapsed":154,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"e10bdd9f-5095-4e84-82be-78a116892110"},"source":["c = DecisionTreeClassifier()\n","c.fit(xtrain, ytrain)\n","ypred = c.predict(xtest)\n","print(accuracy_score(ytest, ypred))"],"execution_count":27,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"09tZEcN82fFF","executionInfo":{"status":"ok","timestamp":1628880661615,"user_tz":300,"elapsed":273,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"30a133d4-70d0-4b3e-e7db-e4544e5c660a"},"source":["c = RandomForestClassifier()\n","c.fit(xtrain, ytrain)\n","ypred = c.predict(xtest)\n","print(accuracy_score(ytest, ypred))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3labKDEn2nN1","executionInfo":{"status":"ok","timestamp":1628880763710,"user_tz":300,"elapsed":144,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"156da821-6e77-459b-bec1-98b436cd895b"},"source":["c = KNeighborsClassifier(n_neighbors=1)\n","c.fit(xtrain, ytrain)\n","ypred = c.predict(xtest)\n","print(accuracy_score(ytest, ypred))"],"execution_count":40,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7XEqV7MJ3ANF","executionInfo":{"status":"ok","timestamp":1628880809574,"user_tz":300,"elapsed":129,"user":{"displayName":"A P","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjn1FbRsMTHakQE1zGFoZqL6IGB1u-FwKffikaFrDQ=s64","userId":"07409191532959877607"}},"outputId":"6e7d5a77-9988-4f7c-f9e5-733c9b0ab250"},"source":["c = GaussianNB()\n","c.fit(xtrain, ytrain)\n","ypred = c.predict(xtest)\n","print(accuracy_score(ytest, ypred))"],"execution_count":41,"outputs":[{"output_type":"stream","text":["0.6511627906976745\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/naive_bayes.py:206: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"}]}]}